{"version":3,"sources":["newslogo.png","components/ArticleItem.js","components/Articles.js","components/Searchbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ArticleItem","_ref","article","react_default","a","createElement","className","title","description","publishedAt","substring","content","href","url","target","source","name","Articles","react_apollo_esm","query","this","props","variables","loading","error","data","class","console","log","articles","react","Object","keys","map","Component","Searchbar","value","handleQuery","handleSubmit","handleDefault","type","onClick","action","onSubmit","id","onChange","client","ApolloClient","uri","US_BUSINESS_QUERY","gql","_templateObject","EVERYTHING_QUERY","_templateObject2","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","articlesQuery","searchInput","e","setState","preventDefault","src","logo","alt","bind","Articles_Articles","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.90320bb5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/newslogo.e781281e.png\";","import React from \"react\";\r\n\r\nexport default function ArticleItem({ article }) {\r\n  return (\r\n    <div className=\"article\">\r\n      <h5 className=\"articleTitle\">{article.title}</h5>\r\n\r\n      <p className=\"artcleDescription\">{article.description}</p>\r\n      <div className=\"articleDetails\">\r\n        <p className=\"articleDate\">{article.publishedAt.substring(0, 10)}</p>\r\n        <p className=\"articleContent\">{article.content}</p>\r\n        <a href={article.url} className=\"articleUrl\" target=\"_blank\">\r\n          {article.source.name}'s entire article\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport ArticleItem from \"./ArticleItem\";\r\n\r\nexport default class Articles extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h5>Articles for the day</h5>\r\n        <Query query={this.props.query} variables={this.props.variables}>\r\n          {({ loading, error, data }) => {\r\n            if (loading) {\r\n              return (\r\n                <h4>\r\n                  <i class=\"fa fa-sync fa-spin\" />\r\n                  Loading...\r\n                </h4>\r\n              );\r\n            }\r\n            if (error) console.log(error);\r\n            console.log(data);\r\n            console.log(data.articles);\r\n            return (\r\n              <Fragment>\r\n                {data[Object.keys(data)[0]].map(article => {\r\n                  return <ArticleItem article={article} />;\r\n                })}\r\n              </Fragment>\r\n            );\r\n          }}\r\n        </Query>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Searchbar({ value, handleQuery, handleSubmit, handleDefault }) {\r\n  return (\r\n    <div>\r\n      <button type=\"button\" onClick={handleDefault}>\r\n        Default\r\n      </button>\r\n\r\n      <form action=\"\" onSubmit={handleSubmit}>\r\n        <input type=\"text\" name=\"\" id=\"\" value={value} onChange={handleQuery} />\r\n        <button type=\"submit\">Search</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, Component } from \"react\";\nimport gql from \"graphql-tag\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\nimport Articles from \"./components/Articles\";\nimport Searchbar from \"./components/Searchbar\";\n\nimport logo from \"./newslogo.png\";\nimport \"./App.css\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\"\n});\n\nconst US_BUSINESS_QUERY = gql`\n  query businessArticlesQuery {\n    articles {\n      title\n      description\n      content\n      publishedAt\n      url\n      source {\n        name\n      }\n    }\n  }\n`;\n\nconst EVERYTHING_QUERY = gql`\n  query everythingQuery($query: String) {\n    articlesByQuery(query: $query) {\n      title\n      description\n      content\n      publishedAt\n      url\n      source {\n        name\n      }\n    }\n  }\n`;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      articlesQuery: US_BUSINESS_QUERY,\n      searchInput: \"\",\n      variables: {}\n    };\n  }\n\n  handleQuery(e) {\n    this.setState({\n      searchInput: e.target.value\n    });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    console.log(this.state.searchInput);\n    this.setState({\n      articlesQuery: EVERYTHING_QUERY,\n      variables: {\n        query: this.state.searchInput\n      },\n      searchInput: \"\"\n    });\n  }\n\n  handleDefault(e) {\n    e.preventDefault();\n    this.setState({\n      articlesQuery: US_BUSINESS_QUERY,\n      variables: {}\n    });\n  }\n\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div className=\"main-container\">\n          <img src={logo} alt=\"\" className=\"logoImg\" />\n          <h3 class=\"main-title\">The news</h3>\n          <Searchbar\n            value={this.state.searchInput}\n            handleQuery={this.handleQuery.bind(this)}\n            handleSubmit={this.handleSubmit.bind(this)}\n            handleDefault={this.handleDefault.bind(this)}\n          />\n          <Articles query={this.state.articlesQuery} variables={this.state.variables} />\n          {/* <Articles query={EVERYTHING_QUERY} variables={{ query: \"blockchain\" }} /> */}\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}